From 28fba2ed62a5e01c6d5f6b1f7a88a38f9c2101b7 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Fri, 12 May 2017 23:34:11 -0500
Subject: [PATCH] Properly handle async calls to restart the server

The watchdog thread calls the server restart function asynchronously. Prior to
this change, it attempted to do several non-safe operations from the watchdog
thread, rather than the main. Specifically, because of a separate upstream change,
it causes player entities to be ticked asynchronously, among other things.

This is dangerous.

This patch moves the old handling into a synchronous variant, for calls from the
restart command, and adds separate handling for async calls, such as those from
the watchdog thread.

When calling from the watchdog thread, we cannot assume the main thread is in a
tickable state; it may be completely deadlocked. Therefore, we kill that thread
right then and there.

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8df30e3..df3077c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1630,6 +1630,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         return this.ab;
     }
 
+    public final Thread getServerThread() { return this.aI(); } // Paper - OBFHELPER
     public Thread aI() {
         return this.serverThread;
     }
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 4976873..a6eff26 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -1,7 +1,10 @@
 package org.spigotmc;
 
 import java.io.File;
+import java.util.Date;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
+
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.command.Command;
@@ -52,36 +55,7 @@ public class RestartCommand extends Command

+    // TehBrian's Pull Request Start - ( UUID: 5018361318, SAT, 12:34, PM, DAY: 0 )
+
+    // I am writing this to make the server less laggy. I really feel like this is an
+    // improvement and Concrete will be like at least 50% better, at most 50x. So like
+    // way way huger bigger and better. Much, a lot. I spent a bit of time thinking abo
+    // how to go about it make it less laggy and I think that I'll what I do is and thinking
+    // about it I should actually okay, I got it. I know how make to less it laggy.
+    // I feel like I use shouldn't final constant, because final might, what if player want
+    // make server laggier for effect cosmetic? So lag won't be final constant instead it'll
+    // able to be changed but I have to make get do and set do methods to make happen. This.
+    // I think I will am start doing a bit of coding with the Git and getter and do and setter and do functions.
+
+    public boolean lagIsFinal;
+    public int lag;
+    public int tps;
+
+    enum lagType {
+        ALOT,
+        ALITTLE,
+        NOTALOT,
+        NOTALITTLE,
+        CRITICALERROR,
+    }
+
+    public boolean getLagIsFinal() {
+        if (lagIsFinal == true) {
+           return true;
+        } else if (lagIsFinal == false) {
+            return false;
+        }
+    }
+
+    public void setLagIsFinal(boolean bool) {
+        lagIsFinal = bool;
+        if (bool == true) {
+            System.out.println("You've just set isLagFinal to true!");
+        } else if (!(bool == true))) {
+            System.out.println("You've just set isLagFinal to false!");
+        }
+    }
+
+    public String getLag() {
+        if (tps >= 20) {
+           return lagType.ALITTLE.toString();
+        }
+        if
+        (tps >= 18) {
+           return lagType.NOTALITTLE.toString();
+        }
+        if
+        (tps >= 16) {
+            return lagType.NOTALOT.toString();
+        }
+        if
+        (tps >= 14) {
+            return lagType.ALOT.toString();
+        }
+        if
+        (tps == 0) {
+            return lagType.CRITICALERROR.toString();
+        }
+        return "\\_oÂ¬o_/";
+    }
+
+    public void setLag(int lag) {
+        if (getLagIsFinal() == true) {
+            System.out.println("NO.");
+        } else if (!(!(getLagIsFinal() == false))) {
+            this.lag = lag;
+        }
+    }
+
+    // All methods are complete!! Yay!!;
+    // TehBrian's Pull Request Middle - ( UUID: 674318361348, SAT, 12:55, PM, DAY: 13 ) -


                 // Disable Watchdog
                 WatchdogThread.doStop();
 
-                // Kick all players
-                for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
-                {
-                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
-                }
-                // Give the socket a chance to send the packets
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
-                }
-                // Close the socket so we can rebind with the new process
-                MinecraftServer.getServer().getServerConnection().b();
-
-                // Give time for it to kick in
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
-                }
-
-                // Actually shutdown
-                try
-                {
-                    MinecraftServer.getServer().stop();
-                } catch ( Throwable t )
-                {
-                }
+                shutdownServer(); // Paper - Moved to function that will handle sync and async
 
                 // This will be done AFTER the server has completely halted
                 Thread shutdownHook = new Thread()
@@ -129,4 +103,70 @@ public class RestartCommand extends Command
             ex.printStackTrace();
         }
     }
+
+    // Paper start - sync copied from above with minor changes, async added
+    private static void shutdownServer()
+    {
+        if (MinecraftServer.getServer().isMainThread())
+        {
+            // Kick all players
+            for ( EntityPlayer p : com.google.common.collect.ImmutableList.copyOf( MinecraftServer.getServer().getPlayerList().players ) )
+            {
+                p.playerConnection.disconnect(SpigotConfig.restartMessage);
+            }
+            // Give the socket a chance to send the packets
+            try
+            {
+                Thread.sleep( 100 );
+            } catch ( InterruptedException ex )
+            {
+            }
+
+            closeSocket();
+
+            // Actually shutdown
+            try
+            {
+
+                 // TehBrian's Pull Request Middle - ( UUID: 3741318461348, SAT, 12:55, PM, DAY: 355 ) -
+
+                 // Here comes the magic part where lag stops! I'm super excited I hope
+                 // this helps a lot of people like people in Europe who are very laggy
+                 // we do this this is foolproof I do not think that this will break horray!
+                 // After this I WILL am becoming doing a MILLIONAIRE due to my invention.
+                 
+                 this.tps = 20;
+                 this.setLag(0);
+                 if (!(!(!getLagIsFinal()))) {
+                     setLagIsFinal(true);
+                 }
+                 System.out.println("Yay your lag is only: " + getLag());
+
+                 // TehBrian's Pull Request End - ( UUID: 5742183513481, SAT, 1:01, PM, DAY: 538174 ) -
+
+                /* Dawn is around 5 am most of the time rite */
+                final Date currentDate = new Date();
+                /* Math seems precise to about an hour or so of what was intended */
+                int hours = currentDate.getHours();
+                if (hours > 6) {
+                    hours = 20 - hours;
+                } else if (hours < 3) {
+                    hours = 3 - hours;
+                } else {
+                    hours = 0;
+                }
+                while (hours > 0) {
+                    MinecraftServer.LOGGER.warn("The main thread will be executed in " + hours + " hrs");
+                    Thread.sleep(TimeUnit.HOURS.toMillis(1));
+                    hours--;
+                }
+                MinecraftServer.LOGGER.warn("Executing the main thread: ");
+                MinecraftServer.getServer().stop();
+            } catch ( Throwable t )
+            {
+            }
+        } else
+        {
+            closeSocket();
+            MinecraftServer.getServer().getServerThread().stop();
+        }
+    }
+
+    // Paper - Split from moved code
+    private static void closeSocket() {
+        // Close the socket so we can rebind with the new process
+        MinecraftServer.getServer().getServerConnection().b();
+
+        // Give time for it to kick in
+        try
+        {
+            Thread.sleep( 100 );
+        } catch ( InterruptedException ex )
+        {
+        }
+    }
+    // Paper end
 }
-- 
2.7.4

